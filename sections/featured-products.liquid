{% comment %}
  @file Featured Products Section
  @summary A customizable section to showcase featured or best-selling products
  @customizable
{% endcomment %}

<section class="featured-products py-12 md:py-16 lg:py-20 {% if section.settings.background_color == 'light' %}bg-naturah-cream{% elsif section.settings.background_color == 'dark' %}bg-naturah-dark{% elsif section.settings.background_color == 'accent' %}bg-naturah-green/10{% else %}bg-white{% endif %}" id="FeaturedProducts-{{ section.id }}">
  <div class="container mx-auto px-4">
    {% if section.settings.title != blank %}
      <div class="text-center mb-10">
        <h2 class="text-3xl md:text-4xl font-bold mb-3">{{ section.settings.title }}</h2>
        {% if section.settings.subtitle != blank %}
          <p class="text-lg text-naturah-black/80 max-w-3xl mx-auto">{{ section.settings.subtitle }}</p>
        {% endif %}
      </div>
    {% endif %}

    {% assign products_per_row = section.settings.products_per_row | plus: 0 %}
    {% assign products_to_show = section.settings.products_to_show | plus: 0 %}
    
    <div class="featured-products-grid{% if products_per_row == 2 %} grid-2-columns{% elsif products_per_row == 3 %} grid-3-columns{% elsif products_per_row == 4 %} grid-4-columns{% endif %}">
      {% assign collection = collections[section.settings.collection] %}
      {%- for product in collection.products limit: products_to_show -%}
        {% render 'product-card', 
          product: product,
          show_vendor: section.settings.show_vendor,
          show_rating: section.settings.show_rating,
          show_description: section.settings.show_description,
          show_badges: section.settings.show_badges,
          show_secondary_image: section.settings.show_secondary_image,
          show_color_swatches: section.settings.show_color_swatches,
          show_quick_add: section.settings.show_quick_add,
          class: 'h-full'
        %}
      {%- else -%}
        {%- for i in (1..4) -%}
          <div class="featured-product-placeholder">
            <div class="product-card rounded-lg overflow-hidden bg-white shadow-sm h-full flex flex-col animate-pulse">
              <div class="product-image-container relative pb-[100%] bg-naturah-cream/30"></div>
              <div class="product-info p-4 flex flex-col">
                <div class="h-4 bg-naturah-cream/50 rounded w-1/3 mb-2"></div>
                <div class="h-5 bg-naturah-cream/50 rounded w-2/3 mb-3"></div>
                <div class="h-4 bg-naturah-cream/50 rounded w-1/4 mb-4"></div>
                <div class="h-3 bg-naturah-cream/50 rounded w-full mb-2"></div>
                <div class="h-3 bg-naturah-cream/50 rounded w-5/6"></div>
              </div>
            </div>
          </div>
        {%- endfor -%}
      {%- endfor -%}
    </div>

    {% assign show_view_all = section.settings.show_view_all %}
    {% assign collection_product_count = collection.all_products_count | default: 0 %}
    {% if show_view_all and collection != blank and collection_product_count > products_to_show %}
      <div class="view-all-container text-center mt-10">
        <a href="{{ collection.url }}" class="view-all-button inline-block px-6 py-3 rounded-md font-medium text-base transition-colors duration-200 {% if section.settings.button_style == 'primary' %}bg-naturah-green text-white hover:bg-naturah-green-dark{% elsif section.settings.button_style == 'secondary' %}bg-naturah-cream text-naturah-black hover:bg-naturah-cream/80{% else %}bg-transparent border-2 border-naturah-green text-naturah-green hover:bg-naturah-green/5{% endif %}">
          {{ section.settings.view_all_text }}
        </a>
      </div>
    {% endif %}
  </div>
</section>

<style>
  .featured-products-grid {
    display: grid;
    gap: 1.5rem;
  }
  
  @media (min-width: 640px) {
    .featured-products-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1024px) {
    .featured-products-grid.grid-2-columns {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .featured-products-grid.grid-3-columns {
      grid-template-columns: repeat(3, 1fr);
    }
    
    .featured-products-grid.grid-4-columns {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  
  .product-card:hover .quick-add-button,
  .product-card:hover .quick-view-button {
    transform: translateY(0);
    opacity: 1;
  }

  .quick-add-button,
  .quick-view-button {
    transform: translateY(10px);
    opacity: 0;
    transition: all 0.3s ease;
  }
</style>

{% schema %}
{
  "name": "Featured Products",
  "tag": "section",
  "class": "section-featured-products",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "default": "Featured Products",
      "label": "Heading"
    },
    {
      "type": "text",
      "id": "subtitle",
      "default": "Shop our most popular products",
      "label": "Subheading"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "select",
      "id": "background_color",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "light",
          "label": "Light"
        },
        {
          "value": "dark",
          "label": "Dark"
        },
        {
          "value": "accent",
          "label": "Accent"
        }
      ],
      "default": "none",
      "label": "Background color"
    },
    {
      "type": "range",
      "id": "products_per_row",
      "min": 2,
      "max": 4,
      "step": 1,
      "default": 4,
      "label": "Products per row"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "Maximum products to show"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": true,
      "label": "Show vendor"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "default": true,
      "label": "Show description"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": true,
      "label": "Show product rating"
    },
    {
      "type": "checkbox",
      "id": "show_badges",
      "default": true,
      "label": "Show product badges"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": true,
      "label": "Show second image on hover"
    },
    {
      "type": "checkbox",
      "id": "show_color_swatches",
      "default": true,
      "label": "Show color swatches"
    },
    {
      "type": "checkbox",
      "id": "show_quick_add",
      "default": true,
      "label": "Show quick add button"
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "default": true,
      "label": "Show 'View all' button"
    },
    {
      "type": "text",
      "id": "view_all_text",
      "default": "View All Products",
      "label": "'View all' button text"
    },
    {
      "type": "select",
      "id": "button_style",
      "options": [
        {
          "value": "primary",
          "label": "Primary"
        },
        {
          "value": "secondary",
          "label": "Secondary"
        },
        {
          "value": "outline",
          "label": "Outline"
        }
      ],
      "default": "primary",
      "label": "Button style"
    }
  ],
  "presets": [
    {
      "name": "Featured Products",
      "settings": {
        "collection": "",
        "products_per_row": 4,
        "products_to_show": 4
      }
    }
  ]
}
{% endschema %}

{% javascript %}
class ProductForm extends HTMLElement {
  constructor() {
    super();
    this.form = this.querySelector('form');
    this.form.addEventListener('submit', this.onSubmit.bind(this));
  }

  onSubmit(evt) {
    evt.preventDefault();
    const submitButton = this.querySelector('[type="submit"]');
    const originalText = submitButton.innerHTML;

    submitButton.classList.add('loading');
    submitButton.innerHTML = 'Adding...';

    const config = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
      },
      body: new URLSearchParams(new FormData(this.form))
    };

    fetch('/cart/add.js', config)
      .then(response => response.json())
      .then(data => {
        submitButton.innerHTML = 'Added!';
        
        setTimeout(() => {
          submitButton.innerHTML = originalText;
          submitButton.classList.remove('loading');
        }, 2000);
        
        // Trigger cart update
        const cartUpdateEvent = new CustomEvent('cart:refresh');
        document.documentElement.dispatchEvent(cartUpdateEvent);
      })
      .catch(error => {
        console.error('Error:', error);
        submitButton.innerHTML = 'Error!';
        
        setTimeout(() => {
          submitButton.innerHTML = originalText;
          submitButton.classList.remove('loading');
        }, 2000);
      });
  }
}

customElements.define('product-form', ProductForm);
{% endjavascript %}